agent.js
var DONT = false;
var FIRST = true;
var STOP = false;

$(window).on('load', function () {
	counter = 0;

	if (navigator.userAgent.indexOf('Firefox') > -1) {
		document.getElementById('notSupported').style.display = 'block';
		document.getElementById('startupute').style.display = 'none';
		document.getElementById('questions').style.display = 'none';
		document.getElementById('output').style.display = 'none';
		document.querySelector('.video-container').style.display = 'none';
	} else {
		const output = document.getElementById('output');
		const button = document.getElementById('start');
		const record = document.getElementById('record');
		window.output = output;

		const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;

		var init = function () {
			recognition = new SpeechRecognition(); 

			window.recognition = recognition;

			recognition.lang = 'en-US'; // Engleski jer je igra na engleskom
			recognition.continuous = true;
			recognition.interimResults = false;

			recognition.onresult = (event) => {
				const current = event.resultIndex;
				const transcript = event.results[current][0].transcript;

				window.recognition.stop();
				STOP = true;
				output.innerHTML = transcript + ' ';
				window.ws.send(transcript);
			};

			recognition.onspeechend = () => {
				window.recognition.stop();
				//setTimeout(function(){ recognition.start(); }, 400);
			};

			recognition.onerror = (event) => {
				window.recognition.stop();
				//setTimeout(function(){ recognition.start(); }, 400);
			};
		}
		init();
	}

	record.onclick = () => {
		window.recognition.start();
	}

	$('#agent')[0].ontimeupdate = function () {
		var agent = $('#agent')[0];
		var the_time = agent.currentTime;
		if (the_time >= END) {
			agent.pause();
			play_part('tisina');
			if (!FIRST)
				DONT = true;
		}
		else {
			DONT = false;
		}
	}
	$('#agent')[0].loadedmetadata = function () {
		DONT = false;
		play_part('tisina');
	}
	//AUTo PLAY

	/* Ovo je dio za fullscreen
	if (document.documentElement.requestFullscreen) {
		document.documentElement.requestFullscreen();
	} else if (document.documentElement.mozRequestFullScreen) { // Firefox
		document.documentElement.mozRequestFullScreen();
	} else if (document.documentElement.webkitRequestFullscreen) { // Chrome, Safari and Opera
		document.documentElement.webkitRequestFullscreen();
	} else if (document.documentElement.msRequestFullscreen) { // IE/Edge
		document.documentElement.msRequestFullscreen();
	}*/
	document.querySelector('.video-container').style.display = 'block';
	if (!isMobileBrowser())
		recognition.start();
	document.getElementById('startupute').style.display = 'none';
	document.getElementById('questions').style.display = 'block';
	play_part('tisina');
	question('bok');
	if (isMobileBrowser()) {
		document.getElementById('record').style.display = 'block';
	}
});

function connect() {
	ws = new WebSocket('ws://localhost:8009');
	window.ws = ws;
	ws.onopen = function () {
		ws.send('connect');
		DONT = false;
		play_part('tisina');
	};

	//Nisam siguran ako nam ovo treba?!
	ws.onmessage = function (msg) {
		console.log(msg.data);
		console.log(msg.data.toString());
		play_part(msg.data.toString());
		//Tu je bilo ono sve dugo zakomentirano
	};

	ws.onclose = function (e) {
		console.log('Socket is closed. Reconnect will be attempted in 1 second.', e.reason);
		setTimeout(function () {
			connect();
		}, 1000);
	};

	ws.onerror = function (err) {
		console.error('Socket encountered error: ', err.message, 'Closing socket');
		ws.close();
	};
}

connect();

right = {
	'text-align': 'right',
	'width': '1000px',
	'margin-right': '-400px auto'
};

LAST_PART = ''
CUR_PART = 'tisina';
END = 278;

function play_part(part) {
	LAST_PART = CUR_PART;
	CUR_PART = part;
	var agent = $('#agent')[0];
	var end = 0;

	agent.play()

	DONT = (part !== 'tisina') ? true : false;
	if (part === 'tisina') FIRST = !FIRST

	recognition.stop();

	switch (part) {
		case '01':
			agent.currentTime = 0;
			end = 1;
			break;
		case '02':
			agent.currentTime = 1;
			end = 4;
			break;
		case '03':
			agent.currentTime = 4;
			end = 6;
			break;
		default: // 'tisina'
			agent.currentTime = 6;
			end = 12;
			try {
				if (!isMobileBrowser())
					window.recognition.start();
			}
			catch (e) { }
			break;
	}

	END = end;
}


function question(q) {
	window.recognition.stop();
	window.output.innerHTML = q + ' ';
	window.ws.send(q);
}


function isMobileBrowser() {
	return /Mobi|Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
}

server.py 
#!/usr/bin/env python3
from flask import Flask, render_template
from websocketserver import *
import _thread
from chatterbot import ChatBot
import argparse
from random import choice


app = Flask( __name__, static_folder='static' )

@app.route( '/' )
def home():
    return render_template( 'index.html' )

@app.route( '/agenti' )
def agenti():
    return render_template( 'agenti.html' )

@app.errorhandler( 404 )
def page_not_found( e ):
    return render_template( '404.html' ), 404

@app.errorhandler( 500 )
def server_error( e ):
    return render_template( '500.html' ), 500

@app.route('/favicon.ico')
def favicon():
    return app.send_static_file('favicon.ico')

@app.route('/media/school.jpg')
def bcg():
    return app.send_static_file('media/school.jpg')

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument( "--train", const=True, nargs='?', type=bool, help="Specify if the agent shoud be trained. If not specified agent will be started in default (listening) mode.")
    args = parser.parse_args()

    TRAIN = bool( args.train )

    chatbot = ChatBot( 'MICKO', read_only=not TRAIN )

    if TRAIN:
        from train import *
        train( chatbot )
        sys.exit()
        
    server = SimpleWebSocketServer( '0.0.0.0', 8009, NLPController )
    _thread.start_new_thread( server.serveforever, () )	
    app.run( host='0.0.0.0', debug=False )


websocketserver.py
from SimpleWebSocketServer import SimpleWebSocketServer, WebSocket
from collections import OrderedDict
import sys, os
from time import sleep
import _thread
from chatterbot import ChatBot
from train import LOGIC_ADAPTER

FOLDER = os.path.dirname(os.path.abspath(__file__))


class NLPController( WebSocket ) :
    def __init__( self, *args, **kwargs ):
        WebSocket.__init__( self, *args, **kwargs )
        self.BUFFER = [ 'tisina' ]
        self.LAST = None
        self.chatbot = ChatBot( 'MICKO', read_only=True, logic_adapters=LOGIC_ADAPTER, database=os.path.join( FOLDER, 'db.sqlite3' ) )
        print( self.chatbot.get_response( 'tko te napravio' ) )
        _thread.start_new_thread( self.listen, () )
        
    def listen( self ):
        while True:
            try:
                if self.BUFFER:
                    self.BUFFER = list( OrderedDict.fromkeys( self.BUFFER ) )
                    print( 'BUFFER:', self.BUFFER )
                    cmd = self.BUFFER.pop()
                    print( 'Sending', str( cmd ) )
                    self.sendMessage( str( cmd ) )
                sleep( 0.1 )
            except Exception as e:
                print( 'NLPController: There was an error!', e )

    def handleMessage( self ):
        print( 'DATA:', self.data )
        if self.data != 'connect':
            print( 'ASKING CHATBOT' )
            result = self.chatbot.get_response( self.data )
            print( 'RESULT', result )
            if result != self.LAST:
                print( self.data, result )
                self.BUFFER.append( str( result ) )
                #self.sendMessage( self.data )
                self.LAST = result
        
    def handleConnected(self):
        print( self.address, 'connected' )

    def handleClose( self ):
        print( self.address, 'closed' )
        sys.exit()


Twine passage
<tw-passage data-passage="Intro2" class="intro2-bg">

<div id="agent-container"></div>

<script>

function addAgent(name) {
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = `/${name}`;
    return iframe;
}

document.getElementById('agent-container').appendChild( addAgent( 'agenti' ) );
</script>


<div class="options" id="op3">
Who are you?
Where are you from?
Why come here?
</div>

 [[<button id="btnNextPassage">➤</button> -> Intro3]]

</tw-passage>

Ja želim da kada se neki twine passage učita da on pošalje string koji ga označava npr "intro1"
String se mora poslati preko websocketa tako da ga mogu console.log unutar agent.js
Dao sam ti sve daotete koje mislim da trebaš
Pokušaj ovo učiniti što jednostavnijim
Točno mi reci što moram promjeniti u kojoj datoteci 