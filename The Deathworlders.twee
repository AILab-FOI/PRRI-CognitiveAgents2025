:: StoryTitle
The Deathworlders


:: StoryData
{
  "ifid": "7AA88246-E759-4671-8415-13C23FFA31FC",
  "format": "Harlowe",
  "format-version": "3.3.9",
  "start": "Start",
  "tag-colors": {
    "Start": "red"
  },
  "zoom": 1
}


:: \ Federacija1 {"position":"1100,525","size":"100,100"}
<tw-passage data-passage="Prica1.3" class="intro2-bg">

<div id="agent-container"></div>

<audio id="radioSound2" src="./src/static/media/radio_freq2.mp3" preload="auto"></audio>

<script>
class UnifiedPassageHandler {
    constructor(passageToSend = "000101") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1];
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
              this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 1500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage: ${passageName}`);

        const nextButton = document.getElementById('btnNextPassage');
        if (nextButton) {
			this.ws.close()
            nextButton.click();
        } else {
            console.warn("Fallback: btnNextPassage not found.");
        }
    }
}

// Inicijalizacija WebSocketa i slanje odmah po učitavanju
new UnifiedPassageHandler("000101");

// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {
  const radioSound2 = document.getElementById('radioSound2');
      if (radioSound2){
          radioSound2.volume = 0.3;
          radioSound2.play();
      }
      
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}
</script>



[[<button id="btnNextPassage">➤</button> ->Federacija2]]

</tw-passage>


:: \ IntroA {"position":"700,250","size":"100,100"}
<tw-passage data-passage="IntroA" class="introA-bg">
<audio autoplay>
	<source src="./src/static/media/Intro2Naration.mp3
" type="audio/mp3">
Vaš preglednik ne podržava HTML5 audio element.
</audio>

<audio loop autoplay id="soundEarth">
<source src="./src/static/media/Intro2CitySounds.mp3" type="audio/mp3">
</audio>
  <p id="typingIntro2"></p>
    [[<button id="btnNextPassage">➤</button> -> IntroB]]
</tw-passage>


:: \ IntroB {"position":"975,250","size":"100,100"}
<tw-passage data-passage="IntroB" class="introB-bg">
<audio autoplay>
	<source src="./src/static/media/Intro3.mp3
" type="audio/mp3">
Vaš preglednik ne podržava HTML5 audio element.
</audio>

<audio loop autoplay id="soundCorti">
<source src="./src/static/media/Intro3CortiShip.mp3" type="audio/mp3">
</audio>
  <p id="typingIntro3"></p>
  [[<button id="btnNextPassage">➤</button> -> Federacija1]]
</tw-passage>


:: \ Odabir1 {"position":"1450,350","size":"100,100"}
<tw-passage data-passage="Prica1.3" class="intro2-bg">

<div id="agent-container"></div>

<audio id="radioSound2" src="./src/static/media/radio_freq2.mp3" preload="auto"></audio>

<script>
class UnifiedPassageHandler {
    constructor(passageToSend = "000103") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1];
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
              this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 1500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage: ${passageName}`);

        const nextButton = document.getElementById('btnNextPassage');
        if (nextButton) {
			this.ws.close()
            nextButton.click();
        } else {
            console.warn("Fallback: btnNextPassage not found.");
        }
    }
}

// Inicijalizacija WebSocketa i slanje odmah po učitavanju
new UnifiedPassageHandler("000103");

// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {
  const radioSound2 = document.getElementById('radioSound2');
      if (radioSound2){
          radioSound2.volume = 0.3;
          radioSound2.play();
      }
      
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}
</script>



[[<button id="btnNextPassage">➤</button> ->Prica1.1]]

</tw-passage>


:: \ Odabir2 {"position":"1450,500","size":"100,100"}
<tw-passage data-passage="Prica1.3" class="intro2-bg">

<div id="agent-container"></div>

<audio id="radioSound2" src="./src/static/media/radio_freq2.mp3" preload="auto"></audio>

<script>
class UnifiedPassageHandler {
    constructor(passageToSend = "000203") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1];
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
              this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 1500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage: ${passageName}`);

        const nextButton = document.getElementById('btnNextPassage');
        if (nextButton) {
			this.ws.close()
            nextButton.click();
        } else {
            console.warn("Fallback: btnNextPassage not found.");
        }
    }
}

// Inicijalizacija WebSocketa i slanje odmah po učitavanju
new UnifiedPassageHandler("000203");

// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {
  const radioSound2 = document.getElementById('radioSound2');
      if (radioSound2){
          radioSound2.volume = 0.3;
          radioSound2.play();
      }
      
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}
</script>



[[<button id="btnNextPassage">➤</button> ->Prica1.1]]

</tw-passage>


:: \ Odabir3 {"position":"1450,650","size":"100,100"}
<tw-passage data-passage="Prica1.3" class="intro2-bg">

<div id="agent-container"></div>

<audio id="radioSound2" src="./src/static/media/radio_freq2.mp3" preload="auto"></audio>

<script>
class UnifiedPassageHandler {
    constructor(passageToSend = "000303") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1];
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
              this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 1500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage: ${passageName}`);

        const nextButton = document.getElementById('btnNextPassage');
        if (nextButton) {
			this.ws.close()
            nextButton.click();
        } else {
            console.warn("Fallback: btnNextPassage not found.");
        }
    }
}

// Inicijalizacija WebSocketa i slanje odmah po učitavanju
new UnifiedPassageHandler("000303");

// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {
  const radioSound2 = document.getElementById('radioSound2');
      if (radioSound2){
          radioSound2.volume = 0.3;
          radioSound2.play();
      }
      
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}
</script>



[[<button id="btnNextPassage">➤</button> ->Prica1.1]]

</tw-passage>


:: \ Prica2.1 {"position":"3300,400","size":"100,100"}
<tw-passage data-passage="Prica2.1" class="intro2-bg">

<div id="agent-container"></div>

<audio id="radioSound2" src="./src/static/media/radio_freq2.mp3" preload="auto"></audio>

<script>
class UnifiedPassageHandler {
    constructor(passageToSend = "020101") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1];
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
              this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 1500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage: ${passageName}`);

        const nextButton = document.getElementById('btnNextPassage');
        if (nextButton) {
			this.ws.close()
            nextButton.click();
        } else {
            console.warn("Fallback: btnNextPassage not found.");
        }
    }
}

// Inicijalizacija WebSocketa i slanje odmah po učitavanju
new UnifiedPassageHandler("020101");

// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {
  const radioSound2 = document.getElementById('radioSound2');
      if (radioSound2){
          radioSound2.volume = 0.3;
          radioSound2.play();
      }
      
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}
</script>

<div class="options" id="op3">
What do you want from us? 
Is there any chance for peace?
</div>

[[<button id="btnNextPassage">➤</button> ->Prica2.2]]

</tw-passage>


:: \ Prica4.2a {"position":"5300,300","size":"100,100"}
<tw-passage data-passage="Prica4.2a" class="intro2-bg">

<div id="agent-container"></div>


<audio id="radioSound2" src="./src/static/media/radio_freq2.mp3" preload="auto"></audio>

<script>
class UnifiedPassageHandler {
    constructor(passageToSend = "040102") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1];
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
              this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 1500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage: ${passageName}`);

        const nextButton = document.getElementById('btnNextPassage');
        if (nextButton) {
			this.ws.close()
            nextButton.click();
        } else {
            console.warn("Fallback: btnNextPassage not found.");
        }
    }
}

// Inicijalizacija WebSocketa i slanje odmah po učitavanju
new UnifiedPassageHandler("040102");

// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {
  const radioSound2 = document.getElementById('radioSound2');
      if (radioSound2){
          radioSound2.volume = 0.3;
          radioSound2.play();
      }
      
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}
</script>

[[<button id="btnNextPassage">➤</button> ->Prica4.3]]

</tw-passage>


:: \ Prica4.2b {"position":"5300,500","size":"100,100"}
<tw-passage data-passage="Prica4.2b" class="intro2-bg">

<div id="agent-container"></div>


<audio id="radioSound2" src="./src/static/media/radio_freq2.mp3" preload="auto"></audio>

<script>
class UnifiedPassageHandler {
    constructor(passageToSend = "040202") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1];
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
              this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 1500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage: ${passageName}`);

        const nextButton = document.getElementById('btnNextPassage');
        if (nextButton) {
			this.ws.close()
            nextButton.click();
        } else {
            console.warn("Fallback: btnNextPassage not found.");
        }
    }
}

// Inicijalizacija WebSocketa i slanje odmah po učitavanju
new UnifiedPassageHandler("040202");

// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {
  const radioSound2 = document.getElementById('radioSound2');
      if (radioSound2){
          radioSound2.volume = 0.3;
          radioSound2.play();
      }
      
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}
</script>

[[<button id="btnNextPassage">➤</button> ->Prica4.3]]

</tw-passage>


:: \ Prica4.3a {"position":"5700,300","size":"100,100"}
<tw-passage data-passage="Prica4.3a" class="intro2-bg">

<div id="agent-container"></div>


<audio id="radioSound2" src="./src/static/media/radio_freq2.mp3" preload="auto"></audio>

<script>
class UnifiedPassageHandler {
    constructor(passageToSend = "040104") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1];
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
              this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 1500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage: ${passageName}`);

        const nextButton = document.getElementById('btnNextPassage');
        if (nextButton) {
			this.ws.close()
            nextButton.click();
        } else {
            console.warn("Fallback: btnNextPassage not found.");
        }
    }
}

// Inicijalizacija WebSocketa i slanje odmah po učitavanju
new UnifiedPassageHandler("040104");

// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {
  const radioSound2 = document.getElementById('radioSound2');
      if (radioSound2){
          radioSound2.volume = 0.3;
          radioSound2.play();
      }
      
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}
</script>

[[<button id="btnNextPassage">➤</button> ->Prica4.4]]

</tw-passage>


:: \ Prica4.3b {"position":"5700,500","size":"100,100"}
<tw-passage data-passage="Prica4.3b" class="intro2-bg">

<div id="agent-container"></div>


<audio id="radioSound2" src="./src/static/media/radio_freq2.mp3" preload="auto"></audio>

<script>
class UnifiedPassageHandler {
    constructor(passageToSend = "040204") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1];
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
              this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 1500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage: ${passageName}`);

        const nextButton = document.getElementById('btnNextPassage');
        if (nextButton) {
			this.ws.close()
            nextButton.click();
        } else {
            console.warn("Fallback: btnNextPassage not found.");
        }
    }
}

// Inicijalizacija WebSocketa i slanje odmah po učitavanju
new UnifiedPassageHandler("040204");

// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {
  const radioSound2 = document.getElementById('radioSound2');
      if (radioSound2){
          radioSound2.volume = 0.3;
          radioSound2.play();
      }
      
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}
</script>

[[<button id="btnNextPassage">➤</button> ->Prica4.4]]

</tw-passage>


:: \ Prica4.4a {"position":"6100,300","size":"100,100"}
<tw-passage data-passage="Prica4.4a" class="intro2-bg">

<div id="agent-container"></div>


<audio id="radioSound2" src="./src/static/media/radio_freq2.mp3" preload="auto"></audio>

<script>
class UnifiedPassageHandler {
    constructor(passageToSend = "040106") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1];
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
              this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 1500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage: ${passageName}`);

        const nextButton = document.getElementById('btnNextPassage');
        if (nextButton) {
			this.ws.close()
            nextButton.click();
        } else {
            console.warn("Fallback: btnNextPassage not found.");
        }
    }
}

// Inicijalizacija WebSocketa i slanje odmah po učitavanju
new UnifiedPassageHandler("040106");

// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {
  const radioSound2 = document.getElementById('radioSound2');
      if (radioSound2){
          radioSound2.volume = 0.3;
          radioSound2.play();
      }
      
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}
</script>

[[<button id="btnNextPassage">➤</button> ->Prica4.5]]

</tw-passage>


:: \ Prica4.4b {"position":"6100,500","size":"100,100"}
<tw-passage data-passage="Prica4.4b" class="intro2-bg">

<div id="agent-container"></div>


<audio id="radioSound2" src="./src/static/media/radio_freq2.mp3" preload="auto"></audio>

<script>
class UnifiedPassageHandler {
    constructor(passageToSend = "040206") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1];
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
              this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 1500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage: ${passageName}`);

        const nextButton = document.getElementById('btnNextPassage');
        if (nextButton) {
			this.ws.close()
            nextButton.click();
        } else {
            console.warn("Fallback: btnNextPassage not found.");
        }
    }
}

// Inicijalizacija WebSocketa i slanje odmah po učitavanju
new UnifiedPassageHandler("040206");

// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {
  const radioSound2 = document.getElementById('radioSound2');
      if (radioSound2){
          radioSound2.volume = 0.3;
          radioSound2.play();
      }
      
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}
</script>

[[<button id="btnNextPassage">➤</button> ->Prica4.5]]

</tw-passage>


:: \ Prica5.2a {"position":"5300,700","size":"100,100"}
<tw-passage data-passage="Prica5.2a" class="intro2-bg">

<div id="agent-container"></div>

<audio id="radioSound2" src="./src/static/media/radio_freq2.mp3" preload="auto"></audio>

<script>
class UnifiedPassageHandler {
    constructor(passageToSend = "050103") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1];
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
              this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 1500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage: ${passageName}`);

        const nextButton = document.getElementById('btnNextPassage');
        if (nextButton) {
			this.ws.close()
            nextButton.click();
        } else {
            console.warn("Fallback: btnNextPassage not found.");
        }
    }
}

// Inicijalizacija WebSocketa i slanje odmah po učitavanju
new UnifiedPassageHandler("050103");

// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {
  const radioSound2 = document.getElementById('radioSound2');
      if (radioSound2){
          radioSound2.volume = 0.3;
          radioSound2.play();
      }
      
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}
</script>

[[<button id="btnNextPassage">➤</button> ->Prica5.3]]

</tw-passage>


:: \ Prica5.2b {"position":"5300,900","size":"100,100"}
<tw-passage data-passage="Prica5.2b" class="intro2-bg">

<div id="agent-container"></div>

<audio id="radioSound2" src="./src/static/media/radio_freq2.mp3" preload="auto"></audio>

<script>
class UnifiedPassageHandler {
    constructor(passageToSend = "050203") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1];
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
              this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 1500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage: ${passageName}`);

        const nextButton = document.getElementById('btnNextPassage');
        if (nextButton) {
			this.ws.close()
            nextButton.click();
        } else {
            console.warn("Fallback: btnNextPassage not found.");
        }
    }
}

// Inicijalizacija WebSocketa i slanje odmah po učitavanju
new UnifiedPassageHandler("050203");

// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {
  const radioSound2 = document.getElementById('radioSound2');
      if (radioSound2){
          radioSound2.volume = 0.3;
          radioSound2.play();
      }
      
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}
</script>

[[<button id="btnNextPassage">➤</button> ->Prica5.3]]

</tw-passage>


:: \ Prica5.3a {"position":"5700,700","size":"100,100"}
<tw-passage data-passage="Prica5.3a" class="intro2-bg">

<div id="agent-container"></div>

<audio id="radioSound2" src="./src/static/media/radio_freq2.mp3" preload="auto"></audio>

<script>
class UnifiedPassageHandler {
    constructor(passageToSend = "050105") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1];
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
              this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 1500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage: ${passageName}`);

        const nextButton = document.getElementById('btnNextPassage');
        if (nextButton) {
			this.ws.close()
            nextButton.click();
        } else {
            console.warn("Fallback: btnNextPassage not found.");
        }
    }
}

// Inicijalizacija WebSocketa i slanje odmah po učitavanju
new UnifiedPassageHandler("050105");

// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {
  const radioSound2 = document.getElementById('radioSound2');
      if (radioSound2){
          radioSound2.volume = 0.3;
          radioSound2.play();
      }
      
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}
</script>

[[<button id="btnNextPassage">➤</button> ->Prica5.4]]

</tw-passage>


:: \ Prica5.3b {"position":"5700,900","size":"100,100"}
<tw-passage data-passage="Prica5.3b" class="intro2-bg">

<div id="agent-container"></div>

<audio id="radioSound2" src="./src/static/media/radio_freq2.mp3" preload="auto"></audio>

<script>
class UnifiedPassageHandler {
    constructor(passageToSend = "050205") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1];
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
              this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 1500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage: ${passageName}`);

        const nextButton = document.getElementById('btnNextPassage');
        if (nextButton) {
			this.ws.close()
            nextButton.click();
        } else {
            console.warn("Fallback: btnNextPassage not found.");
        }
    }
}

// Inicijalizacija WebSocketa i slanje odmah po učitavanju
new UnifiedPassageHandler("050205");

// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {
  const radioSound2 = document.getElementById('radioSound2');
      if (radioSound2){
          radioSound2.volume = 0.3;
          radioSound2.play();
      }
      
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}
</script>

[[<button id="btnNextPassage">➤</button> ->Prica5.4]]

</tw-passage>


:: \ Prica5.4a {"position":"6100,800","size":"100,100"}
<tw-passage data-passage="Prica5.4a" class="intro2-bg">

<div id="agent-container"></div>

<audio id="radioSound2" src="./src/static/media/radio_freq2.mp3" preload="auto"></audio>

<script>
class UnifiedPassageHandler {
    constructor(passageToSend = "050107") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1];
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
              this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 1500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage: ${passageName}`);

        const nextButton = document.getElementById('btnNextPassage');
        if (nextButton) {
			this.ws.close()
            nextButton.click();
        } else {
            console.warn("Fallback: btnNextPassage not found.");
        }
    }
}

// Inicijalizacija WebSocketa i slanje odmah po učitavanju
new UnifiedPassageHandler();

// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {
  const radioSound2 = document.getElementById('radioSound2');
      if (radioSound2){
          radioSound2.volume = 0.3;
          radioSound2.play();
      }
      
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}
</script>



</tw-passage>


:: Federacija2 {"position":"1250,525","size":"100,100"}
<tw-passage data-passage="Prica4.5" class="federacija1-bg">

<div id="agent-container"  ></div>

<audio loop id="newEuropeTheme" >
    <source src="./src/static/media/New_Europe_Theme.mp3" type="audio/mp3">
    Your browser does not support the audio element.
  </audio>
 
 <script>
class UnifiedPassageHandler {
    constructor(passageToSend = "000102") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1].trim();
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
                this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 1500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage via button: ${passageName}`);

        // Mapiranje passage imena na odgovarajući gumb
        const buttonMap = {
            'Prica4.5a': 'btnNextPassage1',
            'Prica4.5b': 'btnNextPassage2',
             'Prica4.5c': 'btnNextPassage3'
        };

        const buttonId = buttonMap[passageName];

        if (buttonId) {
            const targetButton = document.getElementById(buttonId);
            if (targetButton) {
                this.ws.close();
                targetButton.click();
            } else {
                console.warn(`Gumb s ID-jem ${buttonId} nije pronađen.`);
            }
        } else {
            console.warn(`Passage ${passageName} nije mapiran na nijedan gumb.`);
        }
    }
}

// Pokretanje WebSocket handlera
new UnifiedPassageHandler("000102");


// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {    
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}


</script>

 <div class="options" id="op3">
(Skeptical) I don’t trust their intentions. They’re hiding too much.
(Neutral) They haven’t shown hostility, but they’re not being fully open either. We need to be cautious.
(Optimistic) Maybe they genuinely don’t seek domination. They could be allies.

</div>
 
   [[<button id="btnNextPassage1" class = "skriven" ></button> -> Odabir1]]
   [[<button id="btnNextPassage2" class = "skriven"></button> -> Odabir2]]
   [[<button id="btnNextPassage3" class = "skriven"></button> -> Odabir3]]
 
 
</tw-passage>


:: Intro1 {"position":"525,250","size":"100,100"}
<tw-passage data-passage="Intro1" class="intro-bg">
<audio autoplay>
	<source src="./src/static/media/IntroNaration.mp3
" type="audio/mp3">
Vaš preglednik ne podržava HTML5 audio element.
</audio>

<audio loop autoplay id="soundEarth">
<source src="./src/static/media/IntroSoundOfEarth.mp3
" type="audio/mp3">
</audio>
  <p id="typing"></p>
  [[<button id="btnNextPassage">➤</button> -> IntroA]]


</tw-passage>


:: Prica1.1 {"position":"1700,200","size":"100,100"}
<tw-passage data-passage="Prica1.1" class="intro2-bg">

<div id="agent-container"></div>

<audio id="radioSound2" src="./src/static/media/radio_freq2.mp3" preload="auto"></audio>

<script>
class UnifiedPassageHandler {
    constructor(passageToSend = "010101") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1];
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
              this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 1500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage: ${passageName}`);
        
        const nextButton = document.getElementById('btnNextPassage');
        if (nextButton) {
			this.ws.close()
            nextButton.click();
        } else {
            console.warn("Fallback: btnNextPassage not found.");
        }
    }
}

// Inicijalizacija WebSocketa i slanje odmah po učitavanju
new UnifiedPassageHandler("010101");

// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {
	const radioSound2 = document.getElementById('radioSound2');
    if (radioSound2){
      radioSound2.volume = 0.3;
      radioSound2.play();
    }
    
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}
</script>

<div class="options" id="op3">
(Optimistic) What exactly do you want from us? Why come to Earth now?
(Neutral) Why did you choose this moment to initate contact with us?
(Skeptical) Why should we trust you now after staying silent for so long?
</div>

[[<button id="btnNextPassage">➤</button> ->Prica1.2]]

</tw-passage>


:: Prica1.2 {"position":"1900,200","size":"100,100"}
<tw-passage data-passage="Prica1.2" class="intro2-bg">

<div id="agent-container"></div>

<audio id="radioSound1" src="./src/static/media/radio_freq1.mp3" preload="auto"></audio>

<script>
class UnifiedPassageHandler {
    constructor(passageToSend = "010102") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1];
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
              this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage: ${passageName}`);

        const nextButton = document.getElementById('btnNextPassage');
        if (nextButton) {
        	this.ws.close()
            nextButton.click();
        } else {
            console.warn("Fallback: btnNextPassage not found.");
        }
    }
}

// Inicijalizacija WebSocketa i slanje odmah po učitavanju
new UnifiedPassageHandler("010102");

// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {
	const radioSound1 = document.getElementById('radioSound1');
    if (radioSound1){
        radioSound1.volume = 0.9;
        radioSound1.play();
    }
    
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}
</script>

<div class="options" id="op2">
(Optimistic) How long have you been observing humanity?
(Neutral) Is there a hidden agenda behind your offer?
(Skeptical) Are you planning to control us?
</div>

[[<button id="btnNextPassage">➤</button> ->Pricca1.3]]
</tw-passage>


:: Prica1.4 {"position":"2300,200","size":"100,100"}
<tw-passage data-passage="Prica1.4" class="intro2-bg">

<div id="agent-container"></div>

<audio id="radioSound1" src="./src/static/media/radio_freq1.mp3" preload="auto"></audio>

<script>
class UnifiedPassageHandler {
    constructor(passageToSend = "010104") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1];
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
              this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 1500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage: ${passageName}`);

        const nextButton = document.getElementById('btnNextPassage');
        if (nextButton) {
			this.ws.close()
            nextButton.click();
        } else {
            console.warn("Fallback: btnNextPassage not found.");
        }
    }
}

// Inicijalizacija WebSocketa i slanje odmah po učitavanju
new UnifiedPassageHandler("010104");

// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {
  const radioSound1 = document.getElementById('radioSound1');
      if (radioSound1){
          radioSound1.volume = 0.9;
          radioSound1.play();
      }
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}
</script>

<div class="options" id="op3">
(Optimistic) Why didn't you contact us sooner?
(Neutral) How do we know you are telling the truth?
(Skeptical) How do we know you won't betray us in the future?
</div>

[[<button id="btnNextPassage">➤</button> ->Prica1.5]]

</tw-passage>


:: Prica1.5 {"position":"2500,200","size":"100,100"}
<tw-passage data-passage="Prica1.5" class="intro2-bg">

<div id="agent-container"></div>

<audio id="radioSound2" src="./src/static/media/radio_freq2.mp3" preload="auto"></audio>

<script>
class UnifiedPassageHandler {
    constructor(passageToSend = "010105") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1];
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
              this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 1500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage: ${passageName}`);

        const nextButton = document.getElementById('btnNextPassage');
        if (nextButton) {
			this.ws.close()
            nextButton.click();
        } else {
            console.warn("Fallback: btnNextPassage not found.");
        }
    }
}

// Inicijalizacija WebSocketa i slanje odmah po učitavanju
new UnifiedPassageHandler("010105");

// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {
	const radioSound2 = document.getElementById('radioSound2');
    if (radioSound2){
      radioSound2.volume = 0.3;
      radioSound2.play();
    }
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}
</script>

<div class="options" id="op3">
(Optimistic) Are there other species you have helped before?
(Neutral) Are there others out there besides you and us?
(Skeptical) How can we trust a species that's so fragile?
</div>

[[<button id="btnNextPassage">➤</button> ->Prica1.6]]

</tw-passage>


:: Prica1.6 {"position":"2700,200","size":"100,100"}
<tw-passage data-passage="Prica1.6" class="intro2-bg">

<div id="agent-container"></div>

<audio id="radioSound1" src="./src/static/media/radio_freq1.mp3" preload="auto"></audio>

<script>
class UnifiedPassageHandler {
    constructor(passageToSend = "010106") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1];
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
              this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 1500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage: ${passageName}`);

        const nextButton = document.getElementById('btnNextPassage');
        if (nextButton) {
			this.ws.close()
            nextButton.click();
        } else {
            console.warn("Fallback: btnNextPassage not found.");
        }
    }
}

// Inicijalizacija WebSocketa i slanje odmah po učitavanju
new UnifiedPassageHandler("010106");

// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {
	const radioSound1 = document.getElementById('radioSound1');
    if (radioSound1){
      radioSound1.volume = 0.9;
      radioSound1.play();
    }
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}
</script>

<div class="options" id="op3">
(Optimistic) If we decline your offer now, will you ever return?
(Neutral) Do you have enemies?
(Skeptical) Are you just here to observe our downfall?
</div>

[[<button id="btnNextPassage">➤</button> ->Prica2.0]]

</tw-passage>


:: Prica2.0 {"position":"3100,400","size":"100,100"}
<tw-passage data-passage="Prica2.1" class="vraxil-brod-bg">


  <p id="dolazakVraxila-brod"></p>
  [[<button id="btnNextPassage">➤</button> -> Prica2.1]]
</tw-passage>


:: Prica2.2 {"position":"3500,400","size":"100,100"}
<tw-passage data-passage="Prica2.2" class="intro2-bg">

<div id="agent-container"></div>

<audio id="radioSound1" src="./src/static/media/radio_freq1.mp3" preload="auto"></audio>

<script>
class UnifiedPassageHandler {
    constructor(passageToSend = "020102") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1];
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
              this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 1500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage: ${passageName}`);

        const nextButton = document.getElementById('btnNextPassage');
        if (nextButton) {
			this.ws.close()
            nextButton.click();
        } else {
            console.warn("Fallback: btnNextPassage not found.");
        }
    }
}

// Inicijalizacija WebSocketa i slanje odmah po učitavanju
new UnifiedPassageHandler("020102");

// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {
    const radioSound1 = document.getElementById('radioSound1');
    if (radioSound1){
      radioSound1.volume = 0.9;
      radioSound1.play();
    }
      
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}
</script>

<div class="options" id="op3">
Have you done this to others?
What makes you think you’re stronger than us?
</div>

[[<button id="btnNextPassage">➤</button> ->Prica2.3]]

</tw-passage>


:: Prica2.3 {"position":"3700,400","size":"100,100"}
<tw-passage data-passage="Prica2.3" class="intro2-bg">

<div id="agent-container"></div>

<audio id="radioSound2" src="./src/static/media/radio_freq2.mp3" preload="auto"></audio>

<script>
class UnifiedPassageHandler {
    constructor(passageToSend = "020103") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1];
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
              this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 1500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage: ${passageName}`);

        const nextButton = document.getElementById('btnNextPassage');
        if (nextButton) {
			this.ws.close()
            nextButton.click();
        } else {
            console.warn("Fallback: btnNextPassage not found.");
        }
    }
}

// Inicijalizacija WebSocketa i slanje odmah po učitavanju
new UnifiedPassageHandler("020103");

// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {
  const radioSound2 = document.getElementById('radioSound2');
      if (radioSound2){
          radioSound2.volume = 0.3;
          radioSound2.play();
      }     
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}
</script>

<div class="options" id="op3">
Do you even care who we are?
What do you fear?”
</div>

[[<button id="btnNextPassage">➤</button> ->Prica2.4]]

</tw-passage>


:: Prica2.4 {"position":"3900,400","size":"100,100"}
<tw-passage data-passage="Prica2.4" class="intro2-bg">

<div id="agent-container"></div>

<audio id="radioSound1" src="./src/static/media/radio_freq1.mp3" preload="auto"></audio>

<script>
class UnifiedPassageHandler {
    constructor(passageToSend = "020104") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1];
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
              this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 1500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage: ${passageName}`);

        const nextButton = document.getElementById('btnNextPassage');
        if (nextButton) {
			this.ws.close()
            nextButton.click();
        } else {
            console.warn("Fallback: btnNextPassage not found.");
        }
    }
}

// Inicijalizacija WebSocketa i slanje odmah po učitavanju
new UnifiedPassageHandler("020104");

// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {
    const radioSound1 = document.getElementById('radioSound1');
    if (radioSound1){
      radioSound1.volume = 0.9;
      radioSound1.play();
    }
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}
</script>

<div class="options" id="op3">
You want a fight? Then come down and face us.
Why now? Why Earth?
</div>

[[<button id="btnNextPassage">➤</button> ->Prica2.5]]

</tw-passage>


:: Prica2.5 {"position":"4100,400","size":"100,100"}
<tw-passage data-passage="Prica2.5" class="intro2-bg">

<div id="agent-container"></div>

<audio id="radioSound2" src="./src/static/media/radio_freq2.mp3" preload="auto"></audio>

<script>
class UnifiedPassageHandler {
    constructor(passageToSend = "020105") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1];
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
              this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 1500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage: ${passageName}`);

        const nextButton = document.getElementById('btnNextPassage');
        if (nextButton) {
			this.ws.close()
            nextButton.click();
        } else {
            console.warn("Fallback: btnNextPassage not found.");
        }
    }
}

// Inicijalizacija WebSocketa i slanje odmah po učitavanju
new UnifiedPassageHandler("020105");

// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {
  const radioSound2 = document.getElementById('radioSound2');
      if (radioSound2){
          radioSound2.volume = 0.3;
          radioSound2.play();
      }
      
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}
</script>

<div class="options" id="op3">
If you destroy us, what do you gain?
Are we just another trophy to you?
</div>

[[<button id="btnNextPassage">➤</button> ->Prica3.0]]

</tw-passage>


:: Prica3.0 {"position":"4300,600","size":"100,100"}
<tw-passage data-passage="Prica3.0" class="federacija1-bg">

<div id="agent-container"></div>

<audio id="radioSound1" src="./src/static/media/radio_freq1.mp3" preload="auto"></audio>

<script>
class UnifiedPassageHandler {
    constructor(passageToSend = "030101") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1];
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
              this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 1500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage: ${passageName}`);

        const nextButton = document.getElementById('btnNextPassage');
        if (nextButton) {
			this.ws.close()
            nextButton.click();
        } else {
            console.warn("Fallback: btnNextPassage not found.");
        }
    }
}

// Inicijalizacija WebSocketa i slanje odmah po učitavanju
new UnifiedPassageHandler("030101");

// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {
    const radioSound1 = document.getElementById('radioSound1');
      if (radioSound1){
        radioSound1.volume = 0.9;
        radioSound1.play();
      }  
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}
</script>

[[<button id="btnNextPassage">➤</button> ->Prica3.1]]

</tw-passage>


:: Prica3.1 {"position":"4500,600","size":"100,100"}
<tw-passage data-passage="Prica3.1" class="federacija1-bg">

<div id="agent-container"></div>

<audio loop id="newEuropeTheme" >
    <source src="./src/static/media/New_Europe_Theme.mp3" type="audio/mp3">
    Your browser does not support the audio element.
  </audio>
 
 <script>
class UnifiedPassageHandler {
    constructor(passageToSend = "050505") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1].trim();
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
                this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 1500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage via button: ${passageName}`);

        // Mapiranje passage imena na odgovarajući gumb
        const buttonMap = {
            'Prica3.1a': 'btnNextPassage1',
            'Prica3.1b': 'btnNextPassage2'
        };

        const buttonId = buttonMap[passageName];

        if (buttonId) {
            const targetButton = document.getElementById(buttonId);
            if (targetButton) {
                this.ws.close();
                targetButton.click();
            } else {
                console.warn(`Gumb s ID-jem ${buttonId} nije pronađen.`);
            }
        } else {
            console.warn(`Passage ${passageName} nije mapiran na nijedan gumb.`);
        }
    }
}

// Pokretanje WebSocket handlera
new UnifiedPassageHandler("050505");


// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {
  const radioSound2 = document.getElementById('radioSound2');
      if (radioSound2){
          radioSound2.volume = 0.3;
          radioSound2.play();
      }
      
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}


</script>

 
 
   [[<button id="btnNextPassage1" class = "skriven" ></button> ->Prica3.1a]]
   [[<button id="btnNextPassage2" class = "skriven"></button> ->Prica3.1b]]
 
 
   [[<button id="btnNextPassage1" style="display:block">➤a</button> ->Prica3.1a]]
   [[<button id="btnNextPassage2">➤b</button> ->Prica3.1b]]
</tw-passage>


:: Prica3.1a {"position":"4700,400","size":"100,100"}
<tw-passage data-passage="Prica3.1a." class="intro2-bg">

<div id="agent-container"></div>

<audio id="radioSound2" src="./src/static/media/radio_freq2.mp3" preload="auto"></audio>

<script>
class UnifiedPassageHandler {
    constructor(passageToSend = "030102") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1];
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
              this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 1500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage: ${passageName}`);

        const nextButton = document.getElementById('btnNextPassage');
        if (nextButton) {
			this.ws.close()
            nextButton.click();
        } else {
            console.warn("Fallback: btnNextPassage not found.");
        }
    }
}

// Inicijalizacija WebSocketa i slanje odmah po učitavanju
new UnifiedPassageHandler("030102");

// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {
  const radioSound2 = document.getElementById('radioSound2');
      if (radioSound2){
          radioSound2.volume = 0.3;
          radioSound2.play();
      }
      
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}
</script>

[[<button id="btnNextPassage">➤</button> ->Prica4.2]]

</tw-passage>


:: Prica3.1b {"position":"4700,800","size":"100,100"}
<tw-passage data-passage="Prica3.1b" class="federacija1-bg">

<div id="agent-container"></div>

<audio id="radioSound2" src="./src/static/media/radio_freq2.mp3" preload="auto"></audio>

<script>
class UnifiedPassageHandler {
    constructor(passageToSend = "030202") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1];
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
              this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 1500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage: ${passageName}`);

        const nextButton = document.getElementById('btnNextPassage');
        if (nextButton) {
			this.ws.close()
            nextButton.click();
        } else {
            console.warn("Fallback: btnNextPassage not found.");
        }
    }
}

// Inicijalizacija WebSocketa i slanje odmah po učitavanju
new UnifiedPassageHandler("030202");

// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {
  const radioSound2 = document.getElementById('radioSound2');
      if (radioSound2){
          radioSound2.volume = 0.3;
          radioSound2.play();
      }
      
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}
</script>

[[<button id="btnNextPassage">➤</button> ->Prica5.1]]

</tw-passage>


:: Prica4.2 {"position":"5100,400","size":"100,100"}
<tw-passage data-passage="Prica4.2" class="federacija1-bg">

<div id="agent-container"  ></div>

<audio loop id="battleTheme" >
    <source src="./src/static/media/Battle_Theme.mp3" type="audio/mp3">
    Your browser does not support the audio element.
  </audio>
 
 <script>
class UnifiedPassageHandler {
    constructor(passageToSend = "040101") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1].trim();
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
                this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 1500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage via button: ${passageName}`);

        // Mapiranje passage imena na odgovarajući gumb
        const buttonMap = {
            'Prica4.2a': 'btnNextPassage1',
            'Prica4.2b': 'btnNextPassage2'
        };

        const buttonId = buttonMap[passageName];

        if (buttonId) {
            const targetButton = document.getElementById(buttonId);
            if (targetButton) {
                this.ws.close();
                targetButton.click();
            } else {
                console.warn(`Gumb s ID-jem ${buttonId} nije pronađen.`);
            }
        } else {
            console.warn(`Passage ${passageName} nije mapiran na nijedan gumb.`);
        }
    }
}

// Pokretanje WebSocket handlera
new UnifiedPassageHandler("040101");


// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {  
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}


</script>

 <div class="options" id="op3">
Defend the command center. We hold the core.
Distribute forces across civilian sectors.
</div>
 
   [[<button id="btnNextPassage1" class = "skriven" ></button> -> Prica4.2a]]
   [[<button id="btnNextPassage2" class = "skriven"></button> -> Prica4.2b]]
 
 
   [[<button id="btnNextPassage1" style="display:block">➤a</button> -> Prica4.2a]]
   [[<button id="btnNextPassage2">➤b</button> -> Prica4.2b]]
</tw-passage>


:: Prica4.3 {"position":"5500,400","size":"100,100"}
<tw-passage data-passage="Prica4.3" class="federacija1-bg">

<div id="agent-container" ></div>

<audio loop id="battleTheme" >
    <source src="./src/static/media/Battle_Theme.mp3" type="audio/mp3">
    Your browser does not support the audio element.
  </audio>
 
 <script>
class UnifiedPassageHandler {
    constructor(passageToSend = "040103") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1].trim();
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
                this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 1500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage via button: ${passageName}`);

        // Mapiranje passage imena na odgovarajući gumb
        const buttonMap = {
            'Prica4.3a': 'btnNextPassage1',
            'Prica4.3b': 'btnNextPassage2'
        };

        const buttonId = buttonMap[passageName];

        if (buttonId) {
            const targetButton = document.getElementById(buttonId);
            if (targetButton) {
                this.ws.close();
                targetButton.click();
            } else {
                console.warn(`Gumb s ID-jem ${buttonId} nije pronađen.`);
            }
        } else {
            console.warn(`Passage ${passageName} nije mapiran na nijedan gumb.`);
        }
    }
}

// Pokretanje WebSocket handlera
new UnifiedPassageHandler("040103");


// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {
  const radioSound2 = document.getElementById('radioSound2');
      if (radioSound2){
          radioSound2.volume = 0.3;
          radioSound2.play();
      }
      
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}


</script>

 <div class="options" id="op3">
Use everything we’ve got. Burn them down.
Target only their leaders. Keep it clean.
</div>
 
   [[<button id="btnNextPassage1" class = "skriven" ></button> -> Prica4.3a]]
   [[<button id="btnNextPassage2" class = "skriven"></button> -> Prica4.3b]]
 
 
   [[<button id="btnNextPassage1" style="display:block">➤a</button> -> Prica4.3a]]
   [[<button id="btnNextPassage2">➤b</button> -> Prica4.3b]]
</tw-passage>


:: Prica4.4 {"position":"5900,400","size":"100,100"}
<tw-passage data-passage="Prica4.4" class="federacija1-bg">

<div id="agent-container" ></div>

<audio loop id="battleTheme" >
    <source src="./src/static/media/Battle_Theme.mp3" type="audio/mp3">
    Your browser does not support the audio element.
  </audio>
 
 <script>
class UnifiedPassageHandler {
    constructor(passageToSend = "040105") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1].trim();
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
                this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 1500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage via button: ${passageName}`);

        // Mapiranje passage imena na odgovarajući gumb
        const buttonMap = {
            'Prica4.4a': 'btnNextPassage1',
            'Prica4.4b': 'btnNextPassage2'
        };

        const buttonId = buttonMap[passageName];

        if (buttonId) {
            const targetButton = document.getElementById(buttonId);
            if (targetButton) {
                this.ws.close();
                targetButton.click();
            } else {
                console.warn(`Gumb s ID-jem ${buttonId} nije pronađen.`);
            }
        } else {
            console.warn(`Passage ${passageName} nije mapiran na nijedan gumb.`);
        }
    }
}

// Pokretanje WebSocket handlera
new UnifiedPassageHandler("040105");


// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {
  const radioSound2 = document.getElementById('radioSound2');
      if (radioSound2){
          radioSound2.volume = 0.3;
          radioSound2.play();
      }
      
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}


</script>

  <div class="options" id="op3">
Let the Corti handle it. They’re better equipped.
Keep it under human command. We lead this.
</div>
 
   [[<button id="btnNextPassage1" class = "skriven" ></button> -> Prica4.4a]]
   [[<button id="btnNextPassage2" class = "skriven"></button> -> Prica4.4b]]
 
 
   [[<button id="btnNextPassage1" style="display:block">➤a</button> -> Prica4.4a]]
   [[<button id="btnNextPassage2">➤b</button> -> Prica4.4b]]
</tw-passage>


:: Prica4.5 {"position":"6300,400","size":"100,100"}
<tw-passage data-passage="Prica4.5" class="federacija1-bg">

<div id="agent-container"  ></div>

<audio loop id="newEuropeTheme" >
    <source src="./src/static/media/New_Europe_Theme.mp3" type="audio/mp3">
    Your browser does not support the audio element.
  </audio>
 
 <script>
class UnifiedPassageHandler {
    constructor(passageToSend = "040107") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1].trim();
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
                this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 1500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage via button: ${passageName}`);

        // Mapiranje passage imena na odgovarajući gumb
        const buttonMap = {
            'Prica4.5a': 'btnNextPassage1',
            'Prica4.5b': 'btnNextPassage2',
             'Prica4.5c': 'btnNextPassage3'
        };

        const buttonId = buttonMap[passageName];

        if (buttonId) {
            const targetButton = document.getElementById(buttonId);
            if (targetButton) {
                this.ws.close();
                targetButton.click();
            } else {
                console.warn(`Gumb s ID-jem ${buttonId} nije pronađen.`);
            }
        } else {
            console.warn(`Passage ${passageName} nije mapiran na nijedan gumb.`);
        }
    }
}

// Pokretanje WebSocket handlera
new UnifiedPassageHandler("040107");


// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {
  const radioSound2 = document.getElementById('radioSound2');
      if (radioSound2){
          radioSound2.volume = 0.3;
          radioSound2.play();
      }
      
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}


</script>

 
 
   [[<button id="btnNextPassage1" class = "skriven" ></button> ->Prica4.5a]]
   [[<button id="btnNextPassage2" class = "skriven"></button> ->Prica4.5b]]
   [[<button id="btnNextPassage2" class = "skriven"></button> ->Prica4.5c]]
 
 
   [[<button id="btnNextPassage1" style="display:block">➤a</button> ->Prica4.5a]]
   [[<button id="btnNextPassage2">➤b</button> ->Prica4.5b]]
   [[<button id="btnNextPassage3">➤c</button> ->Prica4.5c]]
</tw-passage>


:: Prica4.5a {"position":"6500,300","size":"100,100"}
<tw-passage data-passage="Prica4.5a" class="intro2-bg">

<div id="agent-container"></div>

<audio id="radioSound2" src="./src/static/media/radio_freq2.mp3" preload="auto"></audio>

<script>
class UnifiedPassageHandler {
    constructor(passageToSend = "040108") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1];
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
              this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 1500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage: ${passageName}`);

        const nextButton = document.getElementById('btnNextPassage');
        if (nextButton) {
			this.ws.close()
            nextButton.click();
        } else {
            console.warn("Fallback: btnNextPassage not found.");
        }
    }
}

// Inicijalizacija WebSocketa i slanje odmah po učitavanju
new UnifiedPassageHandler("040108");

// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {
  const radioSound2 = document.getElementById('radioSound2');
      if (radioSound2){
          radioSound2.volume = 0.3;
          radioSound2.play();
      }
      
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}
</script>

[[<button id="btnNextPassage">➤</button> ->Prica4.6a]]

</tw-passage>


:: Prica4.5b {"position":"6500,400","size":"100,100"}
<tw-passage data-passage="Prica4.5b" class="intro2-bg">

<div id="agent-container"></div>

<audio id="radioSound2" src="./src/static/media/radio_freq2.mp3" preload="auto"></audio>

<script>
class UnifiedPassageHandler {
    constructor(passageToSend = "040208") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1];
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
              this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 1500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage: ${passageName}`);

        const nextButton = document.getElementById('btnNextPassage');
        if (nextButton) {
			this.ws.close()
            nextButton.click();
        } else {
            console.warn("Fallback: btnNextPassage not found.");
        }
    }
}

// Inicijalizacija WebSocketa i slanje odmah po učitavanju
new UnifiedPassageHandler("040208");

// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {
  const radioSound2 = document.getElementById('radioSound2');
      if (radioSound2){
          radioSound2.volume = 0.3;
          radioSound2.play();
      }
      
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}
</script>

[[<button id="btnNextPassage">➤</button> ->Prica4.6a]]

</tw-passage>


:: Prica4.5c {"position":"6500,500","size":"100,100"}
<tw-passage data-passage="Prica4.5c" class="intro2-bg">

<div id="agent-container"></div>

<audio id="radioSound2" src="./src/static/media/radio_freq2.mp3" preload="auto"></audio>

<script>
class UnifiedPassageHandler {
    constructor(passageToSend = "040308") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1];
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
              this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 1500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage: ${passageName}`);

        const nextButton = document.getElementById('btnNextPassage');
        if (nextButton) {
			this.ws.close()
            nextButton.click();
        } else {
            console.warn("Fallback: btnNextPassage not found.");
        }
    }
}

// Inicijalizacija WebSocketa i slanje odmah po učitavanju
new UnifiedPassageHandler("040308");

// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {
  const radioSound2 = document.getElementById('radioSound2');
      if (radioSound2){
          radioSound2.volume = 0.3;
          radioSound2.play();
      }
      
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}
</script>

[[<button id="btnNextPassage">➤</button> ->Prica4.6b]]

</tw-passage>


:: Prica4.6a {"position":"6700,300","size":"100,100"}
Congrats dobia si


:: Prica4.6b {"position":"6700,500","size":"100,100"}
loser


:: Prica5.1 {"position":"4900,800","size":"100,100"}
<tw-passage data-passage="Prica5.1" class="federacija1-bg">

<div id="agent-container"></div>

<audio id="radioSound1" src="./src/static/media/radio_freq1.mp3" preload="auto"></audio>


<script>
class UnifiedPassageHandler {
    constructor(passageToSend = "050101") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1];
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
              this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 1500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage: ${passageName}`);

        const nextButton = document.getElementById('btnNextPassage');
        if (nextButton) {
			this.ws.close()
            nextButton.click();
        } else {
            console.warn("Fallback: btnNextPassage not found.");
        }
    }
}

// Inicijalizacija WebSocketa i slanje odmah po učitavanju
new UnifiedPassageHandler("050101");

// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {
  const radioSound1 = document.getElementById('radioSound1');
    if (radioSound1){
      radioSound1.volume = 0.9;
      radioSound1.play();
    }
      
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}
</script>

[[<button id="btnNextPassage">➤</button> ->Prica5.2]]

</tw-passage>


:: Prica5.2 {"position":"5100,800","size":"100,100"}
<tw-passage data-passage="Prica5.2" class="federacija1-bg">

<div id="agent-container"  ></div>

<audio loop id="battleTheme" >
    <source src="./src/static/media/Battle_Theme.mp3" type="audio/mp3">
    Your browser does not support the audio element.
  </audio>
 
 <script>
class UnifiedPassageHandler {
    constructor(passageToSend = "050102") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1].trim();
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
                this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 1500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage via button: ${passageName}`);

        // Mapiranje passage imena na odgovarajući gumb
        const buttonMap = {
            'Prica5.2a': 'btnNextPassage1',
            'Prica5.2b': 'btnNextPassage2'
        };

        const buttonId = buttonMap[passageName];

        if (buttonId) {
            const targetButton = document.getElementById(buttonId);
            if (targetButton) {
                this.ws.close();
                targetButton.click();
            } else {
                console.warn(`Gumb s ID-jem ${buttonId} nije pronađen.`);
            }
        } else {
            console.warn(`Passage ${passageName} nije mapiran na nijedan gumb.`);
        }
    }
}

// Pokretanje WebSocket handlera
new UnifiedPassageHandler("050102");


// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {
  const radioSound2 = document.getElementById('radioSound2');
      if (radioSound2){
          radioSound2.volume = 0.3;
          radioSound2.play();
      }
      
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}


</script>

  <div class="options" id="op3">
Hold the capital. If we lose it, we lose everything.
Spread thin. Try to protect as many cities as possible.
</div>
 
   [[<button id="btnNextPassage1" class = "skriven" ></button> -> Prica5.2a]]
   [[<button id="btnNextPassage2" class = "skriven"></button> -> Prica5.2b]]
 
 
   [[<button id="btnNextPassage1" style="display:block">➤a</button> -> Prica5.2a]]
   [[<button id="btnNextPassage2">➤b</button> -> Prica5.2b]]
</tw-passage>


:: Prica5.3 {"position":"5500,800","size":"100,100"}
<tw-passage data-passage="Prica5.3" class="federacija1-bg">

<div id="agent-container"  ></div>

<audio loop id="battleTheme" >
    <source src="./src/static/media/Battle_Theme.mp3" type="audio/mp3">
    Your browser does not support the audio element.
  </audio>
 
 <script>
class UnifiedPassageHandler {
    constructor(passageToSend = "050104") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1].trim();
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
                this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 1500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage via button: ${passageName}`);

        // Mapiranje passage imena na odgovarajući gumb
        const buttonMap = {
            'Prica5.3a': 'btnNextPassage1',
            'Prica5.3b': 'btnNextPassage2'
        };

        const buttonId = buttonMap[passageName];

        if (buttonId) {
            const targetButton = document.getElementById(buttonId);
            if (targetButton) {
                this.ws.close();
                targetButton.click();
            } else {
                console.warn(`Gumb s ID-jem ${buttonId} nije pronađen.`);
            }
        } else {
            console.warn(`Passage ${passageName} nije mapiran na nijedan gumb.`);
        }
    }
}

// Pokretanje WebSocket handlera
new UnifiedPassageHandler("050104");


// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {
  const radioSound2 = document.getElementById('radioSound2');
      if (radioSound2){
          radioSound2.volume = 0.3;
          radioSound2.play();
      }
      
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}


</script>

  <div class="options" id="op3">
Evacuate key personnel. Someone has to survive.
We stay. We fight. To the last man.
</div>
 
   [[<button id="btnNextPassage1" class = "skriven" ></button> -> Prica5.3a]]
   [[<button id="btnNextPassage2" class = "skriven"></button> -> Prica5.3b]]
 
 
   [[<button id="btnNextPassage1" style="display:block">➤a</button> -> Prica5.3a]]
   [[<button id="btnNextPassage2">➤b</button> -> Prica5.3b]]
</tw-passage>


:: Prica5.4 {"position":"5900,800","size":"100,100"}
<tw-passage data-passage="Prica5.4" class="intro2-bg">

<div id="agent-container"></div>

<audio id="radioSound1" src="./src/static/media/radio_freq1.mp3" preload="auto"></audio>

<script>
class UnifiedPassageHandler {
    constructor(passageToSend = "050106") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1];
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
              this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 1500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage: ${passageName}`);

        const nextButton = document.getElementById('btnNextPassage');
        if (nextButton) {
			this.ws.close()
            nextButton.click();
        } else {
            console.warn("Fallback: btnNextPassage not found.");
        }
    }
}

// Inicijalizacija WebSocketa i slanje odmah po učitavanju
new UnifiedPassageHandler("050106");

// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {
  const radioSound1 = document.getElementById('radioSound1');
    if (radioSound1){
      radioSound1.volume = 0.9;
      radioSound1.play();
    }
      
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}
</script>

 <div class="options" id="op3">
Yes. Everyone contributes. This is total war.
No. They stay in shelters. We can’t risk panic.
</div>

[[<button id="btnNextPassage">➤</button> -> Prica5.4a]]

</tw-passage>


:: Pricca1.3 {"position":"2100,200","size":"100,100"}
<tw-passage data-passage="Prica1.3" class="intro2-bg">

<div id="agent-container"></div>

<audio id="radioSound2" src="./src/static/media/radio_freq2.mp3" preload="auto"></audio>

<script>
class UnifiedPassageHandler {
    constructor(passageToSend = "010103") {
        this.passageToSend = passageToSend;
        this.ws = null;
        this.connectWebSocket();
    }

    connectWebSocket() {
        this.ws = new WebSocket('ws://localhost:8009');

        this.ws.onopen = () => {
            console.log("WebSocket veza uspostavljena");
            this.sendPassageName();
        };

        this.ws.onmessage = (event) => {
            if (event.data.startsWith('DO_TRANSITION:')) {
                const passage = event.data.split(':')[1];
                this.transitionToPassage(passage);
            }
        };

        this.ws.onerror = (error) => {
            console.error("WebSocket greška:", error);
            setTimeout(() => this.connectWebSocket(), 1000);
        };
    }

    sendPassageName() {
        if (this.ws.readyState === WebSocket.OPEN) {
            console.log("Šaljem naziv passaga:", this.passageToSend);
            setTimeout(() => {
              this.ws.send(`PASSAGE:${this.passageToSend}`);
            }, 1000);
        } else {
            console.log("WebSocket nije spreman, status:", this.ws.readyState);
            setTimeout(() => this.sendPassageName(), 1500);
        }
    }

    transitionToPassage(passageName) {
        console.log(`Transitioning to passage: ${passageName}`);

        const nextButton = document.getElementById('btnNextPassage');
        if (nextButton) {
			this.ws.close()
            nextButton.click();
        } else {
            console.warn("Fallback: btnNextPassage not found.");
        }
    }
}

// Inicijalizacija WebSocketa i slanje odmah po učitavanju
new UnifiedPassageHandler("010103");

// Učitaj iframe agenta
const agentContainer = document.getElementById('agent-container');
if (agentContainer) {
  const radioSound2 = document.getElementById('radioSound2');
      if (radioSound2){
          radioSound2.volume = 0.3;
          radioSound2.play();
      }
      
    const iframe = document.createElement('iframe');
    iframe.width = '500px';
    iframe.height = '500px';
    iframe.src = '/agenti';
    agentContainer.appendChild(iframe);
}
</script>

<div class="options" id="op3">
(Optimistic) How can we benefit from your technology?
(Neutral) What exacty is your mission here?
(Skeptical) Are you using us for something?
</div>

[[<button id="btnNextPassage">➤</button> ->Prica1.4]]

</tw-passage>


:: Start [Start] {"position":"275,450","size":"100,100"}
<tw-passage data-passage="Start" class="start-bg">
[
  <h1  id="edgeOfExtinction">Edge of Extinction</h1>
  <div>
    [[<button id="btnNewGame">NEW GAME</button> ->Intro1]]
    [[<button id="btnOptions">OPTIONS</button> ->b]]
    [[<button id="btnExit">EXIT</button> ->c]]
     <button id="btnSound">🔇</button>
  </div>
  

  <audio loop id="mainTheme" >
    <source src="./src/static/media/Main_Theme.mp3" type="audio/mp3">
    Your browser does not support the audio element.
  </audio>
]
</tw-passage>


:: b {"position":"600,500","size":"100,100"}
<tw-passage data-passage="Opcije" class="settings-bg">
  <div class="settings-panel">
    <h1 class="title">Options</h1>

      <div class="setting-row">
        <label class="settingName">Music</label>
        <input type="range" min="0" max="100" value="50" step="5">
        <span class="value">50%</span>
      </div>

      <div class="setting-row">
        <label class="settingName">Sound Effects</label>
        <input type="range" min="0" max="100" value="30" step="5">
        <span class="value">30%</span>
      </div>


      <div class="setting-row">
        <label class="settingName" >Voice Over</label>
        <input type="range" min="0" max="100" value="40" step="5">
        <span class="value">40%</span>
    </div>

    [[<button class="btnBack">⮌ BACK</button> ->Start]]
  </div>
</tw-passage>


:: c {"position":"500,775","size":"100,100"}
exit skripta


:: StoryScript [script]
function typeWriter(elementId, text, speed, callback) {
  let i = 0;
  let element = document.getElementById(elementId);

  if (!element) {
    console.error(`Element s ID-jem "${elementId}" nije pronađen.`);
    return; 
  }

  element.innerHTML = "";

  function writeText() {
    if (i < text.length) {
      element.innerHTML += text.charAt(i);
      i++;
      setTimeout(writeText, speed);
    } else if (callback) {
      callback();
    }
  }

  writeText();
}

function updateSlider(slider) {
  const value = ((slider.value - slider.min) / (slider.max - slider.min)) * 100;
  slider.style.background = `linear-gradient(to right, #89FBFB ${value}%, #222 ${value}%)`;

  const output = slider.parentElement.querySelector(".value");
  if(output) {
    output.textContent = `${slider.value}%`;
  }
}

const mainObserver = new MutationObserver((mutationsList, observer) => {
  const sliders = 	document.querySelectorAll('input[type="range"]:not([data-initialized])');
  sliders.forEach(slider => {
    updateSlider(slider);
    slider.addEventListener("input", () => updateSlider(slider));
    slider.dataset.initialized = "true";
  });

 const btnNextPassage = document.getElementById("btnNextPassage");
if (btnNextPassage && !btnNextPassage.dataset.shown) {
  btnNextPassage.style.display = "none";

  setTimeout(() => {
    btnNextPassage.style.display = "inline-block";
    btnNextPassage.dataset.shown = "true";
  }, 1000);
}
  const soundEarth = document.getElementById("soundEarth");
  if (soundEarth) {
    soundEarth.volume = 0.1; 
  }

  const button = document.querySelector("button");
  const buttonSelect = new Audio("https://raw.githubusercontent.com/AILab-FOI/PRRI-CognitiveAgents2025/main/src/static/media/buttonSelect.wav");
  
   if (button && button.id != "btnSound" && !button.dataset.listenerAttached) { 
     button.addEventListener("click", () => {
       const clickAudio = buttonSelect.cloneNode(true);
       clickAudio.volume = 0.3;
       clickAudio.play();
     });
     button.dataset.listenerAttached = "true";
   }


  const btnSound = document.getElementById("btnSound");
  const mainTheme = document.getElementById("mainTheme");
  if (btnSound && mainTheme) {
    btnSound.addEventListener("click", function () {
      mainTheme.play();
      this.disabled = true;
      this.innerText = "🔊";
    });
    mainTheme.volume = 0.85; 
  }

  const typingElement = document.getElementById("typing");
  if (typingElement && !typingElement.dataset.typed) {
    typeWriter("typing", "The year is 2367. The twenty-fourth century has brought humanity technological advancements once thought impossible. We colonized the Moon. Built orbital cities. Established artificial ecosystems in space.Yet on Earth… the same problems remain.", 70);
    typingElement.dataset.typed = "true";
  }

  const typingIntro2Element = document.getElementById("typingIntro2");
  if (typingIntro2Element && !typingIntro2Element.dataset.typed) {
    const firstText = "The old nations no longer exist. After centuries of wars, economic collapses, and climate disasters, humanity is now united under a single government - the Global Federation. But true unity remains a distant dream.";
    const secondText = "The Federation controls global politics, but not the hearts of its people. While the elite rule from their glass towers, resistance movements grow in the shadows. The world may have changed… but power still belongs to those who know how to wield it. In the heart of this new world stands 'New Europe' – a city of glass and steel, a symbol of progress and control.";
    
    typeWriter("typingIntro2", firstText, 70, () => {
      setTimeout(() => {
        typeWriter("typingIntro2", secondText, 70);
      }, 1000);
    });
    typingIntro2Element.dataset.typed = "true";
  }

  const typingIntro3Element = document.getElementById("typingIntro3");
  if(typingIntro3Element && !typingIntro3Element.dataset.typed) {
    const soundSpaceship = document.getElementById("soundCorti");
    if (soundSpaceship) {
      soundSpaceship.volume = 0.3;
    }
    
    const firstText = "The Corti. Beings from the planet Mentis. Fragile, yet brilliant. Their technology far surpasses our own. They came in peace… or so they claim.";
    const secondText = "To some, they are the key to survival. To others, potential conquerors.";
    
    typeWriter("typingIntro3", firstText, 70, () => {
      setTimeout(() => {
        typeWriter("typingIntro3", secondText, 70);
      }, 1000);
    });
    typingIntro3Element.dataset.typed = "true";
  }
  
  const typingFederation1Element = document.getElementById("typingFederation1");

  if (typingFederation1Element && !typingFederation1Element.dataset.typed) {
    const prviTekst = 'PRESIDENT HALE:\n“Three months. And we still don’t know what the Corti really want.”';
    const drugiTekst = 'GENERAL SMITH:\n“They could have attacked us, but they haven’t. That means something.”';
    const treciTekst = 'DR. JOHNSON:\n“Or they’re just waiting for the right moment.”';
    const cetvrtiTekst = 'PRESIDENT HALE:\n“What’s your take?”';

    const dialogues = [prviTekst, drugiTekst, treciTekst, cetvrtiTekst];

    const typeWriters = (elementId, index, speed) => {
      if (index >= dialogues.length) return;

      const element = document.getElementById(elementId);
      if (!element) return;

      element.innerText = ""; // Clear previous text

      typeWriter(elementId, dialogues[index], speed, () => {
        setTimeout(() => {
          typeWriters(elementId, index + 1, speed);
        }, 1500); // Pauza prije sljedećeg govornika
      });
    };

    typeWriters("typingFederation1", 0, 70);
    typingFederation1Element.dataset.typed = "true";
  }

  const typingFederation2Element = document.getElementById("typingFederation2");
  if(typingFederation2Element && !typingFederation2Element.dataset.typed) {
    const firstText = 'DR. JOHNSON: “Exactly. We have to assume the worst until they prove otherwise.”';
    const secondText = 'PRESIDENT HALE: “Even so, we need more information. We’ll arrange a meeting with them.”';
    
    typeWriter("typingFederation2", firstText, 70, () => {
      setTimeout(() => {
        typeWriter("typingFederation2", secondText, 70);
      }, 1000);
    });
    typingFederation2Element.dataset.typed = "true";
  }
  
  const typingFederation3Element = document.getElementById("typingFederation3");
  if(typingFederation3Element && !typingFederation3Element.dataset.typed) {
    const firstText = 'GENERAL SMITH: “Caution is key. We can’t push them away, but we can’t blindly trust them either.”';
    const secondText = 'PRESIDENT HALE: “Agreed. We need to monitor every move they make.”';
    
    typeWriter("typingFederation3", firstText, 70, () => {
      setTimeout(() => {
        typeWriter("typingFederation3", secondText, 70);
      }, 1000);
    });
    typingFederation3Element.dataset.typed = "true";
  }
  
  const typingFederation4Element = document.getElementById("typingFederation4");
  if(typingFederation4Element && !typingFederation4Element.dataset.typed) {
    const firstText = 'PRESIDENT HALE: “That’s possible. But we need proof, not assumptions.”';
    const secondText = 'DR. JOHNSON: “Which is why we’ll continue analyzing their technology.”';
    
    typeWriter("typingFederation4", firstText, 70, () => {
      setTimeout(() => {
        typeWriter("typingFederation4", secondText, 70);
      }, 1000);
    });
    typingFederation4Element.dataset.typed = "true";
  }  
  
  
  const typingdolazakVraxilabrod = document.getElementById("dolazakVraxila-brod");
  if(typingdolazakVraxilabrod && !typingdolazakVraxilabrod.dataset.typed) {
    const firstText = 'TECHNICIAN: “Unknown vessel entering Earth orbit. It is massive. And... it’s not the Corti.”';
    const secondText = 'K’RAATH: “You waste your breath debating survival while the storm already consumes you. We are the Vraxil. And your world is now ours to claim.”';
    
    typeWriter("dolazakVraxila-brod", firstText, 70, () => {
      setTimeout(() => {
        typeWriter("dolazakVraxila-brod", secondText, 70);
      }, 1000);
    });
    typingdolazakVraxilabrod.dataset.typed = "true";
  }
  
  const typingFederation30 = document.getElementById("typingFederation30");
  if(typingFederation30 && !typingFederation30.dataset.typed) {
    const firstText = 'PRESIDENT HALE: “We’ve seen what’s coming. This is no longer politics — it’s survival.”';
    const secondText = 'GENERAL SMITH: “If the Corti are still willing to help... now’s the time.”';
    
    typeWriter("typingFederation30", firstText, 70, () => {
      setTimeout(() => {
        typeWriter("typingFederation30", secondText, 70);
      }, 1000);
    });
    typingFederation30.dataset.typed = "true";
  }
  
  const typingFederation31a = document.getElementById("typingFederation31a");
  if(typingFederation31a && !typingFederation31a.dataset.typed) {
    const firstText = 'NYLAR: “We will stand beside you. But know this — even together, we may not win.”';
    
    typeWriter("typingFederation31a", firstText, 70, () => {
    });
    typingFederation31a.dataset.typed = "true";
  }
  
  
  const typingFederation31b = document.getElementById("typingFederation31b");
  if(typingFederation31b && !typingFederation31b.dataset.typed) {
    const firstText = 'TECHNICIAN: "The Corti do not respond. The channel is silent."';
    const secondText = 'GENERAL SMITH: “Then we stand alone. For as long as we can.”';
    
    typeWriter("typingFederation31b", firstText, 70, () => {
      setTimeout(() => {
        typeWriter("typingFederation31b", secondText, 70);
      }, 1500);
    });
    typingFederation31b.dataset.typed = "true";
  }
  
  const newEuropeTheme = document.getElementById("newEuropeTheme");
    if (newEuropeTheme) {
      newEuropeTheme.volume = 0.7;

      newEuropeTheme.addEventListener("loadedmetadata", () => {
      if (typingFederation1Element) {
        newEuropeTheme.currentTime = 0;
      } else if (typingFederation2Element) {
        newEuropeTheme.currentTime = 28;
      } else if (typingFederation3Element) {
        newEuropeTheme.currentTime = 50;
      } else if (typingFederation4Element) {
        newEuropeTheme.currentTime = 70;
      } else if (typingFederation30) {
        newEuropeTheme.currentTime = 15;
      } else if (typingFederation31a) {
        newEuropeTheme.currentTime = 45;
      } else if (typingFederation31b) {
        newEuropeTheme.currentTime = 63;
      }

      newEuropeTheme.play().catch(e => console.log("Greška kod pokretanja glazbe:", e));
    });
  }
  
    const typingFederation33a = document.getElementById("typingFederation33a");
  if(typingFederation33a && !typingFederation33a.dataset.typed) {
    const firstText = 'NYLAR “Where do we focus our strength?”';
    
    typeWriter("typingFederation33a", firstText, 70, () => {
    });
    typingFederation33a.dataset.typed = "true";
  }
  
  const typingPrica42a = document.getElementById("typingPrica42a");
  if(typingPrica42a && !typingPrica42a.dataset.typed) {
    const firstText = 'You successfully defended the city’s core, but the outer areas suffered heavy damage.';
    
    typeWriter("typingPrica42a", firstText, 70, () => {
    });
    typingPrica42a.dataset.typed = "true";
  }
  
  const typingFederation42b = document.getElementById("typingFederation42b");
  if(typingFederation42b && !typingFederation42b.dataset.typed) {
    const firstText = 'You successfully protected the civilians and their homes, but the shield is losing power fast — it won’t hold much longer.';
    
    typeWriter("typingFederation42b", firstText, 70, () => {
    });
    typingFederation42b.dataset.typed = "true";
  }
  
  const typingFederation43 = document.getElementById("typingFederation43");
  if(typingFederation43 && !typingFederation43.dataset.typed) {
    const firstText = 'GENERAL SMITH: “We have to attack them.”';
    const secondText = 'NYLAR: “Our weapons are powerful, but unstable. How far do we go?”';
    
    typeWriter("typingFederation43", firstText, 70, () => {
      setTimeout(() => {
        typeWriter("typingFederation43", secondText, 70);
      }, 1000);
    });
    typingFederation43.dataset.typed = "true";
  }
  
  const typingFederation43a = document.getElementById("typingFederation43a");
  if(typingFederation43a && !typingFederation43a.dataset.typed) {
    const firstText = 'You inflicted heavy damage on the Vraxils, but the casualties from your attack far outweigh the gains.';
    
    typeWriter("typingFederation43a", firstText, 70, () => {
    });
    typingFederation43a.dataset.typed = "true";
  }
  
  const typingFederation43b = document.getElementById("typingFederation43b");
  if(typingFederation43b && !typingFederation43b.dataset.typed) {
    const firstText = 'The damage wasn’t massive, but it was precise. With minimal casualties, you managed to strike the Vraxil command center. Well done.';
    
    typeWriter("typingFederation43b", firstText, 70, () => {
    });
    typingFederation43b.dataset.typed = "true";
  }
  
  const typingFederation44 = document.getElementById("typingFederation44");
  if(typingFederation44 && !typingFederation44.dataset.typed) {
    const firstText = 'GENERAL SMITH: "We inflicted some damage, now is the time to finish them."';
    const secondText = 'NYLAR: “Air defense is critical. Who commands it?”';
    
    typeWriter("typingFederation44", firstText, 70, () => {
      setTimeout(() => {
        typeWriter("typingFederation44", secondText, 70);
      }, 1000);
    });
    typingFederation44.dataset.typed = "true";
  }
  
  const typingFederation44a = document.getElementById("typingFederation44a");
  if(typingFederation44a && !typingFederation44a.dataset.typed) {
    const firstText = 'By letting the Corti handle the last attack, you avoided human casualties — but now, everything is in their hands.';
    
    typeWriter("typingFederation44a", firstText, 70, () => {
    });
    typingFederation44a.dataset.typed = "true";
  }
  
  const typingFederation44b = document.getElementById("typingFederation44b");
  if(typingFederation44b && !typingFederation44b.dataset.typed) {
    const firstText = "By choosing to take the fate of the world into your own hands, you maintained strategic control — but will it prove to be the better choice?";
    
    typeWriter("typingFederation44b", firstText, 70, () => {
    });
    typingFederation44b.dataset.typed = "true";
  }
  
  const battleTheme = document.getElementById("battleTheme");
    if (battleTheme) {
      battleTheme.volume = 0.5;

      battleTheme.addEventListener("loadedmetadata", () => {
      if (typingFederation33a) {
        battleTheme.currentTime = 0;
      } else if (typingPrica42a) {
        battleTheme.currentTime = 12;
      } else if (typingFederation42b) {
        battleTheme.currentTime = 24;
      } else if (typingFederation43) {
        battleTheme.currentTime = 30;
      } else if (typingFederation43a) {
        battleTheme.currentTime = 35;
      } else if (typingFederation43b) {
        battleTheme.currentTime = 42;
      } else if (typingFederation44) {
        battleTheme.currentTime = 48;
      } else if (typingFederation44a) {
        battleTheme.currentTime = 55;
      } else if (typingFederation44b) {
        battleTheme.currentTime = 60;
      }

      battleTheme.play().catch(e => console.log("Greška kod pokretanja glazbe:", e));
    });
  }
  
  
  const pobjeda45 = document.getElementById("pobjeda45");
  if(pobjeda45 && !pobjeda45.dataset.typed) {
    const firstText = "They stood together — not as one species, but as one purpose. The Vraxil fell, not to strength, but to coordination. And in the silence after battle… came the sound of rebuilding.";
    
    typeWriter("pobjeda45", firstText, 70, () => {
    });
    pobjeda45.dataset.typed = "true";
  }
  
  const teskaPobjeda45 = document.getElementById("teskaPobjeda45");
  if(teskaPobjeda45 && !teskaPobjeda45.dataset.typed) {
    const firstText = "They stood together — not as one species, but bound by necessity. The Vraxil fell, but the cost was immense. Mistakes were made, and some choices came too late. And in the silence after battle… came the weight of what was lost.";
    
    typeWriter("teskaPobjeda45", firstText, 70, () => {
    });
    teskaPobjeda45.dataset.typed = "true";
  }
  
  const poraz45 = document.getElementById("poraz45");
  if(poraz45 && !poraz45.dataset.typed) {
    const firstText = "Unity was not enough. Without clarity, power became chaos. And when the smoke cleared… there was no one left to call it victory.";
    
    typeWriter("poraz45", firstText, 70, () => {
    });
    poraz45.dataset.typed = "true";
  }
  
  const typingFederation51 = document.getElementById("typingFederation51");
  if(typingFederation51 && !typingFederation51.dataset.typed) {
    const firstText = 'GENERAL SMITH: “They are moving fast. No reinforcements. No second chances.”';
    const secondText = 'PRESIDENT HALE: “We’re done waiting. Let’s make the end matter.”';

    
    typeWriter("typingFederation51", firstText, 70, () => {
      setTimeout(() => {
        typeWriter("typingFederation51", secondText, 70);
      }, 1000);
    });
    typingFederation51.dataset.typed = "true";
  }
  
  const typingFederation52 = document.getElementById("typingFederation52");
  if(typingFederation52 && !typingFederation52.dataset.typed) {
    const firstText = 'GENERAL SMITH: “Where do we draw the line?”';
    
    typeWriter("typingFederation52", firstText, 70, () => {
    });
    typingFederation52.dataset.typed = "true";
  }
  
  const typingPrica52a = document.getElementById("typingPrica52a");
  if(typingPrica52a && !typingPrica52a.dataset.typed) {
    const firstText = "By choosing to protect the capital, the outer cities have fallen — and with them, the people.";
    
    typeWriter("typingPrica52a", firstText, 70, () => {
    });
    typingPrica52a.dataset.typed = "true";
  }
  
  const typingPrica52b = document.getElementById("typingPrica52b");
  if(typingPrica52b && !typingPrica52b.dataset.typed) {
    const firstText = "By choosing to defend the cities without the Corti's help, the casualties were immense. Can Earth survive?";
    
    typeWriter("typingPrica52b", firstText, 70, () => {
    });
    typingPrica52b.dataset.typed = "true";
  }
  
   const typingFederation53 = document.getElementById("typingFederation53");
  if(typingFederation53 && !typingFederation53.dataset.typed) {
    const firstText = 'PRESIDENT HALE: “If the walls break… what’s the plan?”';
    
    typeWriter("typingFederation53", firstText, 70, () => {
    });
    typingFederation53.dataset.typed = "true";
  }
  
  const typingFederation53a = document.getElementById("typingFederation53a");
  if(typingFederation53a && !typingFederation53a.dataset.typed) {
    const firstText = "Evacuate key personnel. Someone has to survive.";
    
    typeWriter("typingFederation53a", firstText, 70, () => {
    });
    typingFederation53a.dataset.typed = "true";
  }
  
  const typingFederation53b = document.getElementById("typingFederation53b");
  if(typingFederation53b && !typingFederation53b.dataset.typed) {
    const firstText = "We stay. We fight. To the last man.";
    
    typeWriter("typingFederation53b", firstText, 70, () => {
    });
    typingFederation53b.dataset.typed = "true";
  }
  
   //tu
  
  const typingFederation54 = document.getElementById("typingFederation54");
  if(typingFederation54 && !typingFederation54.dataset.typed) {
    const firstText = 'PRESIDENT HALE: “There are thousands of civilians in shelters. Engineers, medics, even veterans. Do we mobilize them?”';
    
    typeWriter("typingFederation54", firstText, 70, () => {
    });
    typingFederation54.dataset.typed = "true";
  }
  
  if (battleTheme) {
      battleTheme.volume = 0.5;

      battleTheme.addEventListener("loadedmetadata", () => {
      if (typingFederation51) {
        battleTheme.currentTime = 0;
      } else if (typingFederation52) {
        battleTheme.currentTime = 15;
      } else if (typingPrica52a) {
        battleTheme.currentTime = 25;
      } else if (typingPrica52b) {
        battleTheme.currentTime = 30;
      } else if (typingFederation53) {
        battleTheme.currentTime = 35;
      } else if (typingFederation53a) {
        battleTheme.currentTime = 40;
      } else if (typingFederation53b) {
        battleTheme.currentTime = 47;
      } else if (typingFederation54) {
        battleTheme.currentTime = 54;
      } 
        
      battleTheme.play().catch(e => console.log("Greška kod pokretanja glazbe:", e));
    });
  }
  
  const typingFederation54a = document.getElementById("typingFederation54a");
  if(typingFederation54a && !typingFederation54a.dataset.typed) {
    const firstText = "They stood alone. And they fell alone. No help came. No miracle arrived. Only the Vraxil. And in the end... Earth was silent.";

    
    typeWriter("typingFederation54a", firstText, 70, () => {
    });
    typingFederation54a.dataset.typed = "true";
  }

  
});

const initialElement = document.getElementById("typing");
if (initialElement) {
  console.log("Element 'typing' je odmah dostupan.");
  typeWriter("typing", "The year is 2367. The twenty-fourth century has brought humanity technological advancements once thought impossible. We colonized the Moon. Built orbital cities. Established artificial ecosystems in space.Yet on Earth… the same problems remain.", 70);

  const soundEarth = document.getElementById("soundEarth");
  if (soundEarth) {
    soundEarth.volume = 0.1; 
  }
}

mainObserver.observe(document.body, {
  childList: true,
  subtree: true
});

:: StoryStylesheet [stylesheet]
@import url('https://fonts.googleapis.com/css2?family=Iceland&family=Montserrat:ital,wght@0,100..900;1,100..900&family=Sacramento&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Iceberg&family=Iceland&family=Montserrat:ital,wght@0,100..900;1,100..900&family=Sacramento&display=swap');

.start-bg {
  background: url("https://raw.githubusercontent.com/AILab-FOI/PRRI-CognitiveAgents2025/refs/heads/main/src/static/media/probna_slika2.jpg") 
  no-repeat center center;
  background-size: 100% 100%; 
  width: 100vw;
  height: 100vh;
  position: fixed;
  top: 0;
  left: 0;
}

.intro-bg {
  background: url("https://raw.githubusercontent.com/AILab-FOI/PRRI-CognitiveAgents2025/main/src/static/media/Flux_Dev_A_breathtaking_view_of_Earth_from_space_showcasing_ou_1.jpeg") 
  no-repeat center center;
  background-size: 100% 100%;
  width: 100vw;
  height: 100vh;
  position: fixed;
  top: 0;
  left: 0;
  display: flex;
  flex-direction: column;
  height: 100vh;
}

.intro2-bg {
  background: url("https://raw.githubusercontent.com/AILab-FOI/PRRI-CognitiveAgents2025/main/src/static/media/monitor3.png") no-repeat center center;
  background-size: 100% 100%; 
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  position: fixed;
}

.introA-bg {
  background: url("https://raw.githubusercontent.com/AILab-FOI/PRRI-CognitiveAgents2025/main/src/static/media/NewEurope.jpg") 
  no-repeat center center;
  background-size: 100% 100%; 
  width: 100vw;
  height: 100vh;
  position: fixed;
  top: 0;
  left: 0;
}
.introB-bg {
  background: url('https://raw.githubusercontent.com/AILab-FOI/PRRI-CognitiveAgents2025/main/src/static/media/CortiShip.jpg')
  no-repeat center center;
  background-size: 100% 100%; 
  width: 100vw;
  height: 100vh;
  position: fixed;
  top: 0;
  left: 0;
}
.federacija1-bg {
  background: url('https://raw.githubusercontent.com/AILab-FOI/PRRI-CognitiveAgents2025/main/src/static/media/roundTableFederation.jpg')
  no-repeat center center;
  background-size: 100% 100%; 
  width: 100vw;
  height: 100vh;
  position: fixed;
  top: 0;
  left: 0;
}

.federacija2-bg {
  background: url('https://raw.githubusercontent.com/AILab-FOI/PRRI-CognitiveAgents2025/1702804294f200ce32093f2b853434ea7fc08f5e/src/static/media/Flux_Dev_In_a_futuristic_conference_hall_within_New_Europe_a_s_1.jpg')
  no-repeat center center;
  background-size: 100% 100%; 
  width: 100vw;
  height: 100vh;
  position: fixed;
  top: 0;
  left: 0;
}
.prica42a-bg{
  background: url('https://raw.githubusercontent.com/AILab-FOI/PRRI-CognitiveAgents2025/a26b2043ed21e832ae0dfc7bb24884bb987ac413/src/static/media/Z.jpeg')
  no-repeat center center;
  background-size: 100% 100%; 
  width: 100vw;
  height: 100vh;
  position: fixed;
  top: 0;
  left: 0;
}
.gumbiOdabir1 {
  font-family: "Iceland", sans-serif;
  padding: 2%;
  background-color: rgba(0, 0, 0, 0.6);
  letter-spacing: 2px;
  display: flex;
  justify-content: center;
}
.vraxil-brod-bg {
  background: url('https://raw.githubusercontent.com/AILab-FOI/PRRI-CognitiveAgents2025/f713c4075fcd7666f1aff9013dfc3ad545eeb1fc/src/static/media/2Q%3D%3D.jpeg')
  no-repeat center center;
  background-size: 90% 100%; 
  width: 100vw;
  height: 100vh;
  position: fixed;
  top: 0;
  left: 0;
}


tw-passage {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  /*min-height: 100vh; zašto?*/
  margin: 0;
  padding: 0;
}

tw-story {
  margin: 0;
  padding: 0;
}

div {
  display: flex;
  flex-direction: column;
  background-color: rgba(0, 0, 0, 0.494); 
  padding: 12px;
  box-shadow: 0 0 5px rgba(0, 0, 0, 2);
  margin-top: auto;
  width: auto;  
  align-items: center;
}

button {
  font-family: "Iceland", sans-serif;
  background-color: transparent;
  border: transparent;
  color: #c0fbff;
  font-size: 1em;
  padding: 10px 60px;
  letter-spacing: 2px;
  transition: all 0.3s ease;
}

#edgeOfExtinction {
  margin-top: 0.5em;
  font-family: "Iceberg", sans-serif;
  font-size: 3em;
  text-shadow: 2px 2px 5px #94f4fa;
  color: black;
  opacity: 1;
  animation: shadowGrow 2s ease-out;
  margin: 2em 0 2em 0;
}

@keyframes shadowGrow {
  0% {
    opacity: 0;
    text-shadow: 0 0 10px #94f3fa6b;
  }
  100% {
    opacity: 1;
    text-shadow: 2px 2px 5px #94f4fa;
  }
}

button:hover {
  color: #c3f3ef;
  transform: scale(1.1);
  box-shadow: 0 0 15px rgba(0, 0, 0, 0.76);
  cursor: pointer;
}
p{
  font-family: "Iceland", sans-serif;
  padding: 2%;
  background-color: rgba(0, 0, 0, 0.394);
  letter-spacing: 2px;
  margin-top: auto;
  text-align: center;
  position: absolute;
  bottom: 5%;
  left: 50%;
  transform: translateX(-50%);
  width: 90%;
  text-align: center;
}
#btnSound{
  padding: 5px 10px;
  align-self: center;
}
#btnSound:hover{
  box-shadow: none;
  padding: 5px 10px;
  transform: scale(1.5);
}

#agent-container {
  width: 60%;
  height: 90%;
  position: relative;
}

#agent-container iframe {
  width: 100%;
  height: 100%;
  border: none;
  display: block;
}

.options {
  position: absolute;
  bottom: 2%;
  left: 12.5%;
  right: 12.5%;
  width: 75%;
  height: 22%;
  background-color: rgba(0, 0, 0, 0.6); 
  color: white;
  font-size: 1.2em;
  border-radius: 10px;
  box-shadow: 0 0 10px black;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: flex-start;
}

#op2 {
  padding-bottom: 2.5em;
  line-height: 2.2;
}

#op3 {
  padding-bottom: 2.5em;
  line-height: 1.8;
}

#op4 {
  padding-bottom: 2em;
  line-height: 1.6;
  font-size: 1em;
}

#btnNextPassage {
  position: fixed;
  bottom: 20px;
  right: 20px;
  padding: 7px 10px;
  background-color: rgba(0, 0, 0, 0.5); 
  border-radius: 5px;
  display: none;
}
#btnNextPassage2 {
  position: fixed;
  bottom: 20px;
  left: 20px;
  padding: 7px 10px;
  background-color: rgba(0, 0, 0, 0.5); 
  border-radius: 5px;
}

.skriven{
  display: none;
}

#prviOdabir {
  margin-top:80%;
}

.settings-bg {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background: url('https://raw.githubusercontent.com/AILab-FOI/PRRI-CognitiveAgents2025/main/src/static/media/OptionsBackground.jpg') no-repeat center center/cover;
  display: flex;
  justify-content: center;
  align-items: left;
    flex-direction: column;
  z-index: 1000;
}

.setting-row{
  display: flex;
  flex-direction: row;
  padding: 0;
  margin: 0;
  background: transparent;
  border: none;
  width: 75%;
  border: transparent;
}

.title{
  font-size: 1.8em;
  margin: 10px 0 10px 0;
  font-family: "Iceland", sans-serif;
  color: #c0fbff;
  letter-spacing: 2px;
}

.settings-panel{
  width: 50%;
  background-color: rgb(4, 0, 0, 0.85);
  margin: 20px 0 20px 0;

}
.settingName{
  letter-spacing: 2px;
  font-family: "Iceland", sans-serif;
  margin-right: 60px;
  color: #c0fbff;
}
input{
  width: 200px;
}

input[type="range"] {
  appearance: none;
  width: 100%;
  height: 10px;
  background: #222;
  border-radius: 50px;
  outline: none;
  transition: background 0.3s;
  border: 1px solid rgba(137, 251, 251, 0.3); /* Neon border */
}

input[type="range"]::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  width: 16px;
  height: 16px;
  background: #ffffff;
  cursor: pointer;
  clip-path: polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%);
  border: 2px solid #ffffff;
  box-shadow: 0 0 5px #ffffff;
  transition: transform 0.2s, box-shadow 0.2s;
}

input[type="range"]::-moz-range-thumb {
  width: 16px;
  height: 16px;
  background: #89fbfb;
  cursor: pointer;
  clip-path: polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%);
  border: 2px solid #9bffff;
  box-shadow: 0 0 5px #9bffff;
  transition: transform 0.2s, box-shadow 0.2s;

}
input[type="range"]::-webkit-slider-thumb:hover {
  transform: scale(1.2) rotate(45deg);
  box-shadow: 0 0 10px rgba(137, 251, 251, 0.8);
}

input[type="range"]::-moz-range-thumb:hover {
  transform: scale(1.2) rotate(45deg);
  box-shadow: 0 0 10px rgba(137, 251, 251, 0.8);
}
.value{
  font-family: "Iceland", sans-serif;
  margin-left: 20px;
  color: #c0fbff;
}

.prica33a {
  font-family: "Iceland", sans-serif;
  padding: 2%;
  background-color: rgba(0, 0, 0, 0.394);
  letter-spacing: 2px;
  margin-top: auto;
  text-align: center;
  position: absolute;
  bottom: 25%;
  left: 50%;
  transform: translateX(-50%);
  width: 90%;
  text-align: center;
}

.gumb33a {
  display: flex;
  bottom: 5%;
}

.zadnjiP {
  font-family: "Iceland", sans-serif;
  padding: 2%;
  background-color: rgba(0, 0, 0, 0.394);
  letter-spacing: 2px;
  margin-top: auto;
  text-align: center;
  position: absolute;
  bottom: 5%;
  left: 50%;
  transform: translateX(-50%);
  width: 90%;
  text-align: center;
}